library(Seurat)
library(SeuratDisk)
install.packages('SeuratData')
install.packages('Seurat')
install.packages("Seurat")
install.packages('SeuratData')
install.packages('SeuratDisk')
library(Seurat)
library(SeuratDisk)
Convert("TS_Liver.h5ad", dest = "h5seurat", overwrite = T)
TS_Liver.seurat <- LoadH5Seurat("TS_Liver.h5seurat")
devtools::install_github('satijalab/seurat-data')
package_version(SeuratDisk)
package_version('SeuratDisk')
packageVersion('SeuratDisk')
library(Seurat)
library(SeuratData)
warnings()
library(SeuratDisk)
library(SeuratObject)
Convert("TS_Liver.h5ad", dest = "h5seurat", overwrite = TRUE)
TS_Liver.seurat <- LoadH5Seurat("TS_Liver.h5seurat")
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk", force = T)
library(Seurat)
library(SeuratObject)
library(SeuratDisk)
packageVersion('SeuratDisk')
packageVersion('SeuraObject')
packageVersion('SeuratObject')
packageVersion('Seurat')
args(convert)
args(Convert)
Convert("TS_Liver.h5ad", dest = "h5seurat", overwrite = TRUE, verbose = T)
TS_Liver.seurat <- LoadH5Seurat("TS_Liver.h5seurat")
SeuratDisk:::H5ADToH5Seurat(source = 'TS_Liver.h5ad', dest = 'foo', overwrite = T, verbose = T)
SeuratDisk:::H5ADToH5Seurat(source = 'TS_Liver.h5ad', assay = 'X', dest = 'foo', overwrite = T, verbose = T)
?SeuratDisk::Connect
require(SeuratDisk)
require(SeuratObject)
connect.obj <- SeuratDisk::Connect('TS_Liver.h5ad')
require(SeuratDisk)
require(SeuratObject)
args(SeuratDisk::Connect)
require(SeuratDisk)
require(SeuratObject)
connect.obj <- SeuratDisk::Connect('TS_Liver.h5ad', force = T)
library(Seurat)
libary(SeuratDisk)
library(SeuratDisk)
Convert("TS_Liver.h5ad", dest = "h5seurat", overwrite = TRUE)
h5Seurat.connect <- SeuratDisk::Connect('TS_Liver.h5seurat')
h5Seurat.connect$id
h5Seurat.connect[[]]
str(h5Seurat.connect)
quit()
file.h5ad <- hdf5r::H5File$new(filename = file.path('TS_Liver.h5ad}', file), mode = 'r')
writeLines(file.h5ad[['obs/cell_id']][], 'barcodes.tsv')
file.h5ad <- hdf5r::H5File$new(filename = file.path('TS_Liver.h5ad', file), mode = 'r')
writeLines(file.h5ad[['obs/cell_id']][], 'barcodes.tsv')
file.h5ad <- hdf5r::H5File$new(filename = 'TS_Liver.h5ad', mode = 'r')
writeLines(file.h5ad[['obs/cell_id']][], 'barcodes.tsv')
file.h5ad
file.h5ad[['var']]
file.h5ad[['var/gene_symbol']]
file.h5ad[['var/gene_symbol']][]
file.h5ad[['var/ensmblid']][]
file.h5ad[['var/ensemblid']][]
file.h5ad <- hdf5r::H5File$new(filename = 'TS_Liver.h5ad', mode = 'r')
writeLines(file.h5ad[['var/gene_symbol']][], 'genes.tsv')
file.h5ad <- hdf5r::H5File$new(filename = 'TS_Liver.h5ad', mode = 'r')
writeLines(as.character(file.h5ad[['var/gene_symbol']][], 'genes.tsv'))
writeLines(as.character(file.h5ad[['var/gene_symbol']][]), 'genes.tsv')
file.h5ad
file.h5ad[['X']]
file.h5ad[['X/data']]
file.h5ad[['X/data']][]
file.h5ad
file.h5ad[['raw']]
file.h5ad[['raw/X']]
file.h5ad[['raw/X']][]
file.h5ad[['raw/X/data']][]
file.h5ad[['raw/X/data']]
x <- as.matrix(file.h5ad[['raw/X/data']][])
dim(x)
str(x)
file.h5ad
file.h5ad[['raw']]
file.h5ad[['raw/var']]
file.h5ad[['raw/X']]
file.h5ad[['raw/X/data']]
file.h5ad[['raw/X/indices']]
file.h5ad[['raw/X']]
file.h5ad[['raw/X']][]
file.h5ad[[]][]
file.h5ad[[]]
file.h5ad
file.h5ad[['X']]
file.h5ad[['X/data']]
hdf5r::h5attributes(file.h5ad[['X']])
hdf5r::h5attributes(file.h5ad[['raw/X']])
hdf5r::h5attributes(file.h5ad[['raw/X']])$shape
file.h5ad[['raw/X/data']]
libary(SeuratData)
library(SeuratData)
SeuratData::AvailableData()
SeuratData::InstallData('hcabm40k.SeuratData')
library(Seurat)
pbmc.data <- Read10X(data.dir = ".")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc.data <- Read10X(data.dir = "../extdata/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
pbmc@assays
pbmc@version
pbmc@assays
SeuratDisk::SaveH5Seurat(pbmc, filename = 'pbmc3k')
saveRDS(pbmc, 'pbmc3k.Rds')
remove(pbmc.data)
pbmc_small
remove(pbmc_small)
pbmc
pbmc$orig.ident
pbmc$nCount_RNA
pbmc$nFeature_RNA
pbmc@tools
SeuratObject::as.sparse(pbmc)
Seurat::as.sparse(pbmc)
as.sparse(pbbmc)
as.sparse(pbmc)
GetAssayData(pbmc, 'counts')
as.sparse(GetAssayData(pbmc, 'counts'))
GetAssayData(pbmc, 'counts')
str(GetAssayData(pbmc, 'counts'))
args(Seurat::NormalizeData)
Seurat::NormalizeData
Seurat::NormalizeData(pbmc)
GetAssayData(pbmc, 'counts')
Seurat::NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'counts')
Seurat::NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'RNA')
pbmc
Seurat::GetAssayData(pbmc, 'counts')
Seurat::NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'log1pnorm')
pbmc@assays$RNA
pbmc@assays$RNA[]
pbmc@active.assay
pbmc3k <- readRDS("~/GRC/other_projects/glycoCapacityPredictR/inst/extdata/pbmc3k.Rds")
pbmc3k
pbmc_small
remove(pbmc_small)
pbmc_small <- NULL
remove(pbmc_small)
pbmc3k = Seurat::NormalizeData(pbmc3k, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'counts')
pbmc3k = Seurat::NormalizeData(pbmc3k, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'RNA')
pbmc3k@assays$RNA@counts
pbmc3k@assays$RNA@data
obj.sm = Seurat::GetAssayData(pbmc3k, slot = 'data')
obj.sm
obj.sm
obj.sm = Matrix::t(obj.sm)
col_indices <- 1:ncol(obj.sm)
row_indices <- 1:nrow(obj.sm)
batches.list <- split(col_indices, ceiling(seq_along(col_indices)/1000))
pbmcapply_function <- function(i, c.df, r.vec) {
value.vec <- c.df[r.vec, i]
quant.vec <- value.vec[which(value.vec > 0)]
cutof.vec <- quantile(quant.vec, na.rm = T, probs = c(0.1,0.9))
cutof.max <- which(value.vec > 0 & (value.vec < cutof.vec[1] | value.vec > cutof.vec[2]))
value.vec[cutof.max] <- NA
value.vec <- Matrix::sparseVector(value.vec, seq(value.vec), length(value.vec))
return(value.vec)
}
new.sm <-
do.call(
Matrix::cBind,
lapply(batches.list, function(batch) {
do.call(
Matrix::cBind,
lapply(
pbmcapply::pbmclapply(
X = batch,
FUN = pbmcapply_function,
obj.sm,
row_indices,
ignore.interactive = T),
as, "sparseMatrix"))
}))
new.sm <-
do.call(
cbind,
lapply(batches.list, function(batch) {
do.call(
cbind,
lapply(
pbmcapply::pbmclapply(
X = batch,
FUN = pbmcapply_function,
obj.sm,
row_indices,
ignore.interactive = T),
as, "sparseMatrix"))
}))
new.sm
rownames(new.sm) <- rownames(obj.sm)
colnames(new.sm) <- colnames(obj.sm)
obj.sm <- t(new.sm)
str(new.sm)
Matrix::t(new.sm)
obj.sm <- Matrix::t(new.sm)
obj.sm
args(Seurat::AverageExpression)
pbmc3k
pbmc3k@assays$RNA@scale.data
pbmc3k@assays$RNA@data
pbmc3k@assays$RNA@data
pbmc3k@assays$RNA@data[1,]
is.na(pbmc3k@assays$RNA@data)
sum(is.na(pbmc3k@assays$RNA@data))
sum(!is.na(pbmc3k@assays$RNA@data))
?Seurat::AverageExpression
pbmc3k <- readRDS("~/GRC/other_projects/glycoCapacityPredictR/inst/extdata/pbmc3k.Rds")
obj.seurat = pbmc3k
remove(pbmc3k)
obj.seurat = Seurat::NormalizeData(obj.seurat, normalization.method = "LogNormalize", scale.factor = 10000, assay = 'RNA')
obj.sm = Seurat::GetAssayData(obj.sm, slot = 'data')
obj.sm = Seurat::GetAssayData(obj.seurat, slot = 'data')
obj.sm = Matrix::t(obj.sm)
col_indices <- 1:ncol(obj.sm)
row_indices <- 1:nrow(obj.sm)
batches.list <- split(col_indices, ceiling(seq_along(col_indices)/1000))
pbmcapply_function <- function(i, c.df, r.vec) {
value.vec <- c.df[r.vec, i]
quant.vec <- value.vec[which(value.vec > 0)]
cutof.vec <- quantile(quant.vec, na.rm = T, probs = c(0.1,0.9))
cutof.max <- which(value.vec > 0 & (value.vec < cutof.vec[1] | value.vec > cutof.vec[2]))
value.vec[cutof.max] <- NA
value.vec <- Matrix::sparseVector(value.vec, seq(value.vec), length(value.vec))
return(value.vec)
}
new.sm <-
do.call(
cbind,
lapply(batches.list, function(batch) {
do.call(
cbind,
lapply(
pbmcapply::pbmclapply(
X = batch,
FUN = pbmcapply_function,
obj.sm,
row_indices,
ignore.interactive = T),
as, "sparseMatrix"))
}))
rownames(new.sm) <- rownames(obj.sm)
colnames(new.sm) <- colnames(obj.sm)
obj.sm <- Matrix::t(new.sm)
obj.seurat <- Seurat::SetAssayData(obj.seurat, slot = 'scale.data', new.data = obj.sm)
obj.seurat <- Seurat::SetAssayData(obj.seurat, slot = 'counts', new.data = obj.sm)
obj.seurat@assays$RNA@counts
Seurat::AverageExpression(
obj.seurat,
assays = 'RNA',
features = NULL,
return.seurat = FALSE,
group.by = 'celltype',
slot = 'counts',
verbose = T)
Seurat::AverageExpression(
obj.seurat,
assays = 'RNA',
features = NULL,
return.seurat = FALSE,
#group.by = 'celltype',
slot = 'counts',
verbose = T)
Seurat::AverageExpression
?Seurat:::PseudobulkExpression
Seurat:::PseudobulkExpression
View(Seurat:::PseudobulkExpression)
mean(c(1,2,3,NULL))
mean(c(1,2,3))
obj.seurat$orig.ident
obj.seurat@meta.data
obj.seurat@assays$RNA@meta.features
Seurat::RenameIdents
Seurat::RenameIdents()
Seurat::RenameIdents.default
?Seurat::RenameIdents
SeuratObject::RenameIdents
?SeuratObject::RenameIdents
Idents(obj.seurat)
unique(Idents(obj.seurat))
obj.sm
obj.sm[1,]
obj.sm[1,, drop = F]
obj.seurat@meta.data
as.vector(table(c(1,1,1,1,2,2,2,2)))
table(SeuratObject::Idents(obj.seurat))
str(table(SeuratObject::Idents(obj.seurat)))
unlist(table(SeuratObject::Idents(obj.seurat)))
str(unlist(table(SeuratObject::Idents(obj.seurat))))
table(SeuratObject::Idents(obj.seurat))
table(SeuratObject::Idents(obj.seurat))['pbmc3k']
cluster_ids <- as.character(unique(SeuratObject::Idents(obj.seurat)))
cluster_ids
rowSums(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster_ids), drop = F])
rowSums(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster_ids), drop = F] > 0)
rowSums(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster_ids), drop = F] > 0, na.rm = T)
cluster_ids <- as.character(unique(SeuratObject::Idents(obj.seurat)))
pseudobulks.matrix <-
setNames(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowMeans(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F], na.rm = T) }))
c(cluster_ids))
pseudobulks.matrix <-
setNames(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowMeans(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F], na.rm = T) })),
c(cluster_ids))
pseudobulks.matrix
remove(pseudobulks.matrix)
pseudobulks.sm <-
as.sparse(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowMeans(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F], na.rm = T) })),
dimnames = list(gene = rownames(obj.sm), id = cluster_ids))
?as.sparse
?as.sparse.matrix
?as.sparse.matrix
as.sparse.matrix
as.sparse.Matrix
as.sparse
as.sparse.Matrix
Matrix.as.sparse
pseudobulks.sm <-
as.sparse(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowMeans(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F], na.rm = T) }))),
rownames(dimnames = list(gene = rownames(obj.sm), id = cluster_ids))
pseudobulks.sm <-
as.sparse(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowMeans(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F], na.rm = T) })))
pseudobulks.sm
head(pseudobulks.sm)
colnames(pseudobulks.sm) <- cluster_ids
head(pseudobulks.sm)
cluster_sizes.vec <- table(SeuratObject::Idents(obj.seurat))[cluster_ids])
cluster_sizes.vec <- table(SeuratObject::Idents(obj.seurat))[cluster_ids]
cluster_sizes.vec
cells_per_gene.sm <-
setNames(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowSums(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F] > 0, na.rm = T) })))
cells_per_gene.sm <-
as.sparse(
do.call(
cbind,
lapply(cluster_ids, function(cluster) {
rowSums(obj.sm[, SeuratObject::WhichCells(obj.seurat, ident = cluster), drop = F] > 0, na.rm = T) })))
cluster_sizes.vec <- table(SeuratObject::Idents(obj.seurat))[cluster_ids]
colnames(pseudobulks.sm) <- cluster_ids
colnames(cells_per_gene.sm) <- cluster_ids
head(pseudobulks.sm)
head(cells_per_gene.sm)
devtools::build()
devtools::document()
devtools::build()
x <- readRDS('pbmc3k.Rds')
y <- glycoCapacityPredictR::compute_pseudobulk(x)
